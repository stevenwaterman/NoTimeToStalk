{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Tasks.svelte",
    "../../NamedButtonRange.svelte",
    "../../Tooltip.svelte",
    "../../Graph.svelte",
    "../../IntensitySelector.svelte",
    "../../Controller.svelte",
    "../../External.svelte",
    "../../Intensity.svelte",
    "../../Internal.svelte",
    "../../Results.svelte",
    "../../Splash.svelte",
    "../../ViewFilters.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { Router, Link, Route } from \"svelte-routing\";\nimport Intensity from \"./intensity/Intensity.svelte\";\nimport Activities from \"./Activities.svelte\";\nimport Graph from \"./graph/GraphContainer.svelte\";\nimport Tags from \"./Tags.svelte\";\nimport Delete from \"./Delete.svelte\";\nimport Steven from \"./ranking/StevenRanking.svelte\";\nimport Amie from \"./ranking/AmieRanking.svelte\";\nimport Edit from \"./edit/EditWrapper.svelte\";\nimport Controller from \"./mobile/MobileContainer.svelte\";\nimport Tasks from \"./Tasks.svelte\";\nexport let url = \"\";\n</script>\n\n<style>\n  nav {\n    display: grid;\n    gap: 20px;\n    grid-auto-flow: column;\n    overflow-y: scroll;\n  }\n\n  @media only screen and (orientation: portrait) {\n    nav {\n      display: none;\n    }\n  }\n</style>\n\n<Router {url}>\n  <nav>\n    <Link to=\"/\">Home</Link>\n    <Link to=\"/graph\">Graph</Link>\n    <Link to=\"intensity\">Intensity</Link>\n    <Link to=\"amie\">Amie</Link>\n    <Link to=\"steven\">Steven</Link>\n    <Link to=\"activities\">Activities</Link>\n    <Link to=\"tags\">Tags</Link>\n    <Link to=\"delete\">Delete</Link>\n  </nav>\n    <Route path=\"/\" component={Controller} />\n    <Route path=\"graph\" component={Graph} />\n    <Route path=\"intensity\" component={Intensity} />\n    <Route path=\"amie\" component={Amie} />\n    <Route path=\"steven\" component={Steven} />\n    <Route path=\"activities\" component={Activities} />\n    <Route path=\"tags\" component={Tags} />\n    <Route path=\"delete\" component={Delete} />\n    <Route path=\"activities/:id/edit\" component={Edit} />\n    <Route path=\"task\" component={Tasks} />\n</Router>\n",
    "<script lang=\"ts\">import { getTasks } from \"./api\";\nimport { scale } from \"svelte/transition\";\n</script>\n\n<style>\n  .task {\n    position: fixed;\n    left: 50%;\n    top: 20%;\n    transform: translateX(-50%);\n    font-size: 10vw;\n    margin: 0;\n    text-align: center;\n    width: 90%;\n  }\n\n  .header {\n    position: fixed;\n    left: 50%;\n    margin: 0;\n    text-align: center;\n    top: 5%;\n    font-size: 6vw;\n    transform: translateX(-50%);\n  }\n</style>\n\n<p class=\"header\">Your Task:</p>\n\n{#await getTasks()}\n  Waiting\n{:then tasks}\n  {#if Date.parse(tasks.data[0].time) - new Date().getTime() < 3600 * 1000}\n    <p class=\"task\" in:scale={{ duration: 2000 }}>\n      {tasks.data[0].activity_name}\n    </p>\n  {:else}\n    <p class=\"task\" in:scale={{ duration: 2000 }}>Not Ready Yet!</p>\n  {/if}\n{/await}\n",
    "<script lang=\"ts\">export let buttons;\nexport let range = [undefined, undefined];\nexport let flexDirection = \"row\";\nlet firstClick = null;\nfunction click(value) {\n    if (firstClick === null) {\n        range = [undefined, undefined];\n        firstClick = value;\n    }\n    else {\n        range = [Math.min(firstClick, value), Math.max(firstClick, value)];\n        firstClick = null;\n    }\n}\nfunction clear() {\n    range = [undefined, undefined];\n    firstClick = null;\n}\nfunction buttonColor(buttonValue, range) {\n    const [rangeMin, rangeMax] = range;\n    console.log(\"called\");\n    if (rangeMin !== undefined || rangeMax !== undefined) {\n        if (rangeMin === undefined || rangeMin <= buttonValue) {\n            if (rangeMax === undefined || rangeMax >= buttonValue) {\n                return \"background-color: #00FF00\";\n            }\n        }\n    }\n    return \"background-color: white\";\n}\n</script>\n\n<style>\n  .row {\n    display: inline-flex;\n  }\n\n  button {\n    font-size: 10pt;\n    margin: 0;\n  }\n\n  .spacer {\n    width: 4px;\n    height: 4px;\n  }\n</style>\n\n<div class=\"row\" style={`flex-direction: ${flexDirection}`}>\n  {#each buttons as [buttonLabel, buttonValue]}\n    <button on:click={() => click(buttonValue)} style={buttonColor(buttonValue, range)}>{buttonLabel}</button>\n  {/each}\n  <div class=\"spacer\"/>\n  <button on:click={clear}>Clear</button>\n</div>\n",
    "<style>\n  .TT_text {\n    visibility: hidden;\n    padding: 5px;\n    margin-left: 12px;\n    pointer-events: none;\n\n    position: absolute;\n    z-index: 1;\n  }\n\n  .TT_trigger {\n    display: inline;\n  }\n\n  .TT_trigger:hover .TT_text {\n    visibility: visible;\n  }\n</style>\n\n<div class=\"TT_trigger\">\n  <slot name=\"trigger\" />\n  <div\n    class=\"TT_text\"\n    style=\"padding: 4px; border: 1px solid black; background-color: white;\">\n    <slot />\n  </div>\n</div>\n",
    "<script lang=\"ts\">;\nimport { writable, derived } from \"svelte/store\";\n;\nimport { tweened } from \"svelte/motion\";\nimport { cubicOut } from \"svelte/easing\";\nimport { navigate } from \"svelte-routing\";\nimport { fade } from \"svelte/transition\";\nimport colormap from \"colormap\";\nimport NamedButtonRange from \"../components/NamedButtonRange.svelte\";\nimport { getIntensity } from \"./IntensityCalculator\";\nimport NumericButtonRange from \"../components/NumericButtonRange.svelte\";\nimport Tooltip from \"../components/Tooltip.svelte\";\nimport { pannable } from \"./pannable.js\";\nexport let activities;\nfunction jointRatingScore(activity) {\n    const curve = -2;\n    return -(Math.pow(activity.amieRating, curve) +\n        Math.pow(activity.stevenRating, curve));\n}\nfunction stevenRatingScore(activity) {\n    return activity.stevenRating;\n}\nfunction amieRatingScore(activity) {\n    return activity.amieRating;\n}\nfunction intensityScore(activity) {\n    return activity.intensityValue;\n}\nlet scoreType = \"joint\";\nlet score;\n$: score =\n    scoreType === \"joint\"\n        ? jointRatingScore\n        : scoreType === \"steven\"\n            ? stevenRatingScore\n            : scoreType === \"amie\"\n                ? amieRatingScore\n                : intensityScore;\nlet intensityActivities;\n$: intensityActivities = activities\n    .map((activity) => ({\n    ...activity,\n    intensityValue: getIntensity(activity),\n}))\n    .sort((a, b) => {\n    return jointRatingScore(b) - jointRatingScore(a);\n});\nlet intensityDeciles;\n$: intensityDeciles = intensityActivities\n    .map(({ intensityValue }) => intensityValue)\n    .sort((a, b) => a - b)\n    .filter((_, idx) => idx % Math.round(intensityActivities.length / 10) == 0 ||\n    idx === intensityActivities.length - 1);\nlet validDecileActivities;\n$: validDecileActivities = intensityActivities.filter((activity, idx) => activity.tags.every((tag) => tag.name != \"Modifier\") &&\n    activity.intensity.physicality.max !== 0 &&\n    idx > intensityActivities.length * 0.1);\nlet intensityOptions;\n$: intensityOptions = intensityDeciles.map((desired) => [\n    validDecileActivities.reduce((a, b) => Math.abs(a.intensityValue - desired) >\n        Math.abs(b.intensityValue - desired)\n        ? b\n        : a).name,\n    desired,\n]);\nlet intensityRange = [undefined, undefined];\nlet amieIntrusivenessRange = [undefined, undefined];\nlet stevenIntrusivenessRange = [undefined, undefined];\nlet amieNaughtinessRange = [undefined, undefined];\nlet stevenNaughtinessRange = [undefined, undefined];\nlet ickynessRange = [undefined, undefined];\nlet physicalityRange = [undefined, undefined];\nlet preparationRange = [undefined, undefined];\nlet dangerRange = [undefined, undefined];\nfunction clearAllIntensity() {\n    amieIntrusivenessRange = [undefined, undefined];\n    stevenIntrusivenessRange = [undefined, undefined];\n    amieNaughtinessRange = [undefined, undefined];\n    stevenNaughtinessRange = [undefined, undefined];\n    ickynessRange = [undefined, undefined];\n    physicalityRange = [undefined, undefined];\n    preparationRange = [undefined, undefined];\n    dangerRange = [undefined, undefined];\n}\nconst tags = activities\n    .flatMap((activity) => activity.tags)\n    .reduce((acc, elem) => {\n    acc[elem.id] = elem.name;\n    return acc;\n}, {});\nconst tagsFilter = writable(Object.fromEntries(Object.entries(tags).map((entry) => [entry[0], null])));\nconst requiredTags = derived(tagsFilter, (tagsFilter) => Object.entries(tagsFilter)\n    .filter((entry) => entry[1] === true)\n    .map((entry) => parseInt(entry[0])));\nconst bannedTags = derived(tagsFilter, (tagsFilter) => Object.entries(tagsFilter)\n    .filter((entry) => entry[1] === false)\n    .map((entry) => parseInt(entry[0])));\nfunction inRange([rangeMin, rangeMax], value) {\n    if (rangeMin !== undefined && value.max < rangeMin)\n        return false;\n    if (rangeMax !== undefined && value.min > rangeMax)\n        return false;\n    return true;\n}\nlet filteredActivities;\n$: filteredActivities = intensityActivities.filter((activity) => {\n    const tagIds = activity.tags.map((tag) => tag.id);\n    if ($requiredTags.some((id) => !tagIds.includes(id)))\n        return false;\n    if ($bannedTags.some((id) => tagIds.includes(id)))\n        return false;\n    return (inRange(intensityRange, { min: activity.intensityValue, max: activity.intensityValue }) &&\n        inRange(amieIntrusivenessRange, activity.intensity.amieIntrusiveness) &&\n        inRange(stevenIntrusivenessRange, activity.intensity.stevenIntrusiveness) &&\n        inRange(amieNaughtinessRange, activity.intensity.amieNaughtiness) &&\n        inRange(stevenNaughtinessRange, activity.intensity.stevenNaughtiness) &&\n        inRange(ickynessRange, activity.intensity.ickyness) &&\n        inRange(physicalityRange, activity.intensity.physicality) &&\n        inRange(preparationRange, activity.intensity.preparation) &&\n        inRange(dangerRange, activity.intensity.danger));\n}).sort((a, b) => score(b) - score(a));\nfunction leftClickTag(id) {\n    tagsFilter.update((record) => {\n        const old = record[id];\n        if (old === true) {\n            record[id] = null;\n        }\n        else {\n            record[id] = true;\n        }\n        return record;\n    });\n    hoveredTagStore.set(null);\n}\nfunction rightClickTag(id) {\n    tagsFilter.update((record) => {\n        const old = record[id];\n        if (old === false) {\n            record[id] = null;\n        }\n        else {\n            record[id] = false;\n        }\n        return record;\n    });\n    hoveredTagStore.set(null);\n}\nfunction clearAll() {\n    tagsFilter.set(Object.fromEntries(Object.entries(tags).map((entry) => [entry[0], null])));\n}\nlet amieRatings;\n$: amieRatings = filteredActivities.map((activity) => activity.amieRating);\nlet xMin;\n$: xMin = amieRatings.length === 0 ? 0 : Math.min(...amieRatings);\nlet xMax;\n$: xMax = Math.max(0, ...amieRatings);\nlet stevenRatings;\n$: stevenRatings = filteredActivities.map((activity) => activity.stevenRating);\nlet yMin;\n$: yMin = stevenRatings.length === 0 ? 0 : Math.min(...stevenRatings);\nlet yMax;\n$: yMax = Math.max(0, ...stevenRatings);\nconst viewBoxX = tweened(0, {\n    duration: 500,\n    easing: cubicOut,\n});\nconst viewBoxY = tweened(-activities.length, {\n    duration: 500,\n    easing: cubicOut,\n});\nconst viewBoxWidth = tweened(activities.length, {\n    duration: 500,\n    easing: cubicOut,\n});\nconst viewBoxHeight = tweened(activities.length, {\n    duration: 500,\n    easing: cubicOut,\n});\n$: viewBoxX.set(xMin - 5);\n$: viewBoxY.set(-yMax - 5);\n$: viewBoxWidth.set(xMax - xMin + 10);\n$: viewBoxHeight.set(yMax - yMin + 10);\nlet hoveredActivityStore = writable(null);\nfunction entered(activity) {\n    hoveredActivityStore.set(activity);\n}\nfunction exited() {\n    hoveredActivityStore.set(null);\n}\nconst hoveredTagStore = writable(null);\nlet colors;\n$: colors = colormap({\n    colormap: \"viridis\",\n    nshades: Math.ceil(intensityDeciles[intensityDeciles.length - 1] + 1),\n});\nfunction dotColor(activity, hoveredActivity, hoveredTag) {\n    if (hoveredActivity === activity) {\n        return \"#00FF00\";\n    }\n    if (hoveredTag !== null) {\n        const myTags = activity.tags.map((tag) => tag.id);\n        if (myTags.includes(hoveredTag)) {\n            return \"#00FF00\";\n        }\n        else {\n            return \"#FF0000\";\n        }\n    }\n    return colors[Math.round(activity.intensityValue)];\n}\nfunction listColor(activity, hoveredActivity, hoveredTag) {\n    if (hoveredActivity === activity) {\n        return \"#00FF00\";\n    }\n    if (hoveredTag !== null) {\n        const myTags = activity.tags.map((tag) => tag.id);\n        if (myTags.includes(hoveredTag)) {\n            return \"#00FF00\";\n        }\n        else {\n            return \"#FF0000\";\n        }\n    }\n    return \"white\";\n}\nlet showGraph = false;\nconst coords = writable({ x: 0, y: 0 });\nfunction handlePanStart() { }\nfunction handlePanMove(event) {\n    coords.update(($coords) => ({\n        x: $coords.x + event.detail.dx,\n        y: $coords.y + event.detail.dy,\n    }));\n}\n</script>\n\n<style>\n  .grid {\n    display: grid;\n    grid-template-columns: auto auto auto auto auto;\n    gap: 16px;\n  }\n\n  .activityListCol {\n  }\n\n  .activityList {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .intensityComponentsCol {\n  }\n\n  .intensityComponentsGrid {\n    display: grid;\n    grid-template-columns: auto auto;\n    justify-items: right;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .tagListCol {\n  }\n\n  .tagList {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n  }\n\n  button {\n    font-size: 10pt;\n    padding: 4px;\n    margin: 2px;\n  }\n</style>\n\n{#each filteredActivities as activity}\n  {#if $hoveredActivityStore === activity}\n    <div\n      style=\"position: fixed; z-index: 3; transform: translate(calc(50vw - 50%),\n      calc(50vh - 50%)); width: 500px; max-width: 95vw; border: 1px solid black;\n      background-color: white;\"\n      transition:fade={{ duration: 200 }}\n      on:mouseleave={exited}>\n      <h2 style=\"margin: 20px; text-align: center\">\n        {$hoveredActivityStore.name}\n      </h2>\n\n      <p style=\"margin: 20px; text-align: center\">\n        {$hoveredActivityStore.description}\n      </p>\n\n      <div\n        style=\"display: flex; flex-direction: row; justify-content:\n        space-around; flex-wrap: wrap\">\n        {#each $hoveredActivityStore.tags as tag}\n          <div\n            style=\"border: 1px solid black; margin: 4px; padding: 4px;\n            border-radius: 6px\">\n            {tag.name}\n          </div>\n        {/each}\n      </div>\n\n      <div\n        style=\"display: flex; flex-direction: row; justify-content:\n        space-around; margin: 20px\">\n        <span>\n          <b>Intensity:</b>\n          {$hoveredActivityStore.intensityValue}\n        </span>\n        <span>\n          <b>Steven:</b>\n          {$hoveredActivityStore.stevenRating} / {yMax}\n        </span>\n        <span>\n          <b>Amie:</b>\n          {$hoveredActivityStore.amieRating} / {xMax}\n        </span>\n      </div>\n      <div style=\"display: flex; flex-direction: row; justify-content: center\">\n        <button on:click={exited}>Close</button>\n      </div>\n    </div>\n  {/if}\n{/each}\n\n{#if showGraph}\n  <svg\n    use:pannable\n    on:panmove={handlePanMove}\n    preserveAspectRatio=\"xMidYMid meet\"\n    viewBox={[$viewBoxX, $viewBoxY, $viewBoxWidth, $viewBoxHeight].join(' ')}\n    style=\"z-index: 1; position: absolute; max-width: 80vw; max-height: 80vh;\n    transform: translate({$coords.x}px, {$coords.y}px); display: inline; resize:\n    both; overflow: hidden;\">\n    <rect\n      x={$viewBoxX}\n      y={$viewBoxY + 1}\n      width={$viewBoxWidth}\n      height={$viewBoxHeight - 2}\n      stroke=\"black\"\n      fill=\"#DDDDDD\" />\n    {#each filteredActivities as activity}\n      <circle\n        fill={dotColor(activity, $hoveredActivityStore, $hoveredTagStore)}\n        cx={activity.amieRating}\n        cy={-activity.stevenRating}\n        r={1}\n        on:mouseenter={() => entered(activity)}\n        on:contextmenu|preventDefault={() => navigate(`/activities/${activity.id}/edit`)}\n        on:mouseleave={exited} />\n    {/each}\n  </svg>\n{/if}\n\n<div class=\"grid\">\n  <div class=\"activityListCol\">\n    <h1>Best Activities</h1>\n    <select bind:value={scoreType}>\n      <option value=\"joint\">Joint Rating</option>\n      <option value=\"amie\">Amie Rating</option>\n      <option value=\"steven\">Steven Rating</option>\n      <option value=\"intensity\">Intensity</option>\n    </select>\n    <div class=\"activityList\">\n      {#each filteredActivities as activity (activity.name)}\n        <button\n          style={`background-color: ${listColor(activity, $hoveredActivityStore, $hoveredTagStore)}; padding-bottom: 4px`}\n          on:click={() => ($hoveredActivityStore === activity ? exited() : entered(activity))}\n          on:contextmenu|preventDefault={() => navigate(`/activities/${activity.id}/edit`)}>\n          {activity.name}\n        </button>\n      {/each}\n    </div>\n  </div>\n\n  <div class=\"intensityCol\">\n    <h1>Overall Intensity</h1>\n    <NamedButtonRange\n      buttons={intensityOptions}\n      bind:range={intensityRange}\n      flexDirection=\"column\" />\n  </div>\n\n  <div class=\"intensityComponentsCol\">\n    <h1>Intensity Components</h1>\n    <div class=\"intensityComponentsGrid\">\n      <Tooltip>\n        <span slot=\"trigger\">Amie Intrusiveness:</span>\n        <p>0 (No Touching)</p>\n        <p>1 (Touching)</p>\n        <p>2 (Bum Touch)</p>\n        <p>3 (Nipple Touch)</p>\n        <p>4 (Direct Vagina Touching)</p>\n        <p>5 (Anal Touching)</p>\n        <p>6 (Analingus)</p>\n      </Tooltip>\n      <NumericButtonRange max={6} bind:range={amieIntrusivenessRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Steven Intrusiveness:</span>\n        <p>0 (No Touching)</p>\n        <p>1 (Touching)</p>\n        <p>2 (Tummy Touch)</p>\n        <p>3 (Bum Touch)</p>\n        <p>4 (Direct Penis Touching)</p>\n        <p>5 (Anal Touching)</p>\n        <p>6 (Analingus)</p>\n      </Tooltip>\n      <NumericButtonRange max={6} bind:range={stevenIntrusivenessRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Amie Naughtiness:</span>\n        <p>0 (Not Naughty)</p>\n        <p>1 (Intimate, Teenagers would get excited)</p>\n        <p>2 (Slightly Naughty eg handjob)</p>\n        <p>3 (Sexual Things eg sex)</p>\n        <p>4 (Naughty beyond 'normal' levels eg flashing)</p>\n        <p>5 (Performative things)</p>\n      </Tooltip>\n      <NumericButtonRange max={5} bind:range={amieNaughtinessRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Steven Naughtiness:</span>\n        <p>0 (Not Naughty)</p>\n        <p>1 (Intimate, Teenagers would get excited)</p>\n        <p>2 (Slightly Naughty eg handjob)</p>\n        <p>3 (Sexual Things eg sex)</p>\n        <p>4 (Naughty beyond 'normal' levels eg flashing)</p>\n        <p>5 (Performative things)</p>\n      </Tooltip>\n      <NumericButtonRange max={5} bind:range={stevenNaughtinessRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Ickyness:</span>\n        <p>0 (None)</p>\n        <p>1 (Logically can see it's a bit weird)</p>\n        <p>2 (Kinda icky)</p>\n        <p>3 (Weird)</p>\n        <p>4 (Dirty)</p>\n        <p>5 (Disgusting)</p>\n      </Tooltip>\n      <NumericButtonRange max={5} bind:range={ickynessRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Physicality:</span>\n        <p>0 (Verbal)</p>\n        <p>1 (No noticeable effort)</p>\n        <p>2 (Slight movement)</p>\n        <p>3 (Full body movement)</p>\n        <p>4 (Makes you sweat)</p>\n        <p>5 (Like doing the bleep test)</p>\n      </Tooltip>\n      <NumericButtonRange max={5} bind:range={physicalityRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Preparation:</span>\n        <p>0 (None)</p>\n        <p>1 (Sometimes a couple of mins)</p>\n        <p>2 (Usually a couple of mins)</p>\n        <p>3 (An hour)</p>\n        <p>4 (A day)</p>\n        <p>5 (A month)</p>\n      </Tooltip>\n      <NumericButtonRange max={5} bind:range={preparationRange} />\n\n      <Tooltip>\n        <span slot=\"trigger\">Danger:</span>\n        <p>0 (None)</p>\n        <p>1 (Slight risk of small consequences eg handjob)</p>\n        <p>\n          2 (Slight risk of med consequences / med risk of small consequences eg\n          shave me)\n        </p>\n        <p>\n          3 (Med risk of med consequences / small risk of big consequences eg\n          nudes)\n        </p>\n        <p>4 (High risk of big consequneces eg public sex)</p>\n      </Tooltip>\n      <NumericButtonRange max={4} bind:range={dangerRange} />\n\n      <button on:click={() => clearAllIntensity()}>Clear All</button>\n    </div>\n\n  </div>\n\n  <div class=\"tagListCol\">\n    <h1>Tags</h1>\n\n    <div style=\"tagList\">\n      {#each Object.entries(tags) as [id, name]}\n        <button\n          style={`background-color: ${$tagsFilter[parseInt(id)] === true ? '#00FF00' : $tagsFilter[parseInt(id)] === false ? '#FF0000' : 'initial'}`}\n          on:click={() => leftClickTag(parseInt(id))}\n          on:contextmenu|preventDefault={() => rightClickTag(parseInt(id))}\n          on:mouseenter={() => hoveredTagStore.set(parseInt(id))}\n          on:mouseleave={() => hoveredTagStore.set(null)}>\n          {name}\n        </button>\n      {/each}\n    </div>\n\n    <button on:click={clearAll}>Clear All</button>\n  </div>\n\n  <div class=\"optionsCol\">\n    <h1>Options</h1>\n\n    <label style=\"display: inline\" for=\"showGraph\">Show Graph</label>\n    <input id=\"showGraph\" type=\"checkbox\" bind:checked={showGraph} />\n\n    <p>\n      Showing {filteredActivities.length}/{activities.length} activities ({Math.round((100 * filteredActivities.length) / activities.length)}%)\n    </p>\n  </div>\n\n</div>\n",
    "<script lang=\"ts\">;\nimport Tooltip from \"../components/Tooltip.svelte\";\nimport NumericButtonRange from \"../components/NumericButtonRange.svelte\";\nexport let intensity = {\n    amieIntrusiveness: {\n        min: 0,\n        max: 0\n    },\n    stevenIntrusiveness: {\n        min: 0,\n        max: 0\n    },\n    amieNaughtiness: {\n        min: 0,\n        max: 0\n    },\n    stevenNaughtiness: {\n        min: 0,\n        max: 0\n    },\n    ickyness: {\n        min: 0,\n        max: 0\n    },\n    physicality: {\n        min: 0,\n        max: 0\n    },\n    preparation: {\n        min: 0,\n        max: 0\n    },\n    danger: {\n        min: 0,\n        max: 0\n    }\n};\nlet amieIntrusiveness = [intensity.amieIntrusiveness.min, intensity.amieIntrusiveness.max];\nlet stevenIntrusiveness = [intensity.stevenIntrusiveness.min, intensity.stevenIntrusiveness.max];\nlet amieNaughtiness = [intensity.amieNaughtiness.min, intensity.amieNaughtiness.max];\nlet stevenNaughtiness = [intensity.stevenNaughtiness.min, intensity.stevenNaughtiness.max];\nlet ickyness = [intensity.ickyness.min, intensity.ickyness.max];\nlet physicality = [intensity.physicality.min, intensity.physicality.max];\nlet preparation = [intensity.preparation.min, intensity.preparation.max];\nlet danger = [intensity.danger.min, intensity.danger.max];\n$: intensity = {\n    amieIntrusiveness: {\n        min: amieIntrusiveness[0],\n        max: amieIntrusiveness[1]\n    },\n    stevenIntrusiveness: {\n        min: stevenIntrusiveness[0],\n        max: stevenIntrusiveness[1]\n    },\n    amieNaughtiness: {\n        min: amieNaughtiness[0],\n        max: amieNaughtiness[1]\n    },\n    stevenNaughtiness: {\n        min: stevenNaughtiness[0],\n        max: stevenNaughtiness[1]\n    },\n    ickyness: {\n        min: ickyness[0],\n        max: ickyness[1]\n    },\n    physicality: {\n        min: physicality[0],\n        max: physicality[1]\n    },\n    preparation: {\n        min: preparation[0],\n        max: preparation[1]\n    },\n    danger: {\n        min: danger[0],\n        max: danger[1]\n    }\n};\n$: console.log(intensity);\n</script>\n\n<style>\n  .col {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n  }\n</style>\n\n<div class=\"col\">\n  <Tooltip>\n    <span slot=\"trigger\">Amie Intrusiveness:</span>\n    <p>0 (No Touching)</p>\n    <p>1 (Touching)</p>\n    <p>2 (Bum Touch)</p>\n    <p>3 (Nipple Touch)</p>\n    <p>4 (Direct Vagina Touching)</p>\n    <p>5 (Anal Touching)</p>\n    <p>6 (Analingus)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={6} bind:range={amieIntrusiveness} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Steven Intrusiveness:</span>\n    <p>0 (No Touching)</p>\n    <p>1 (Touching)</p>\n    <p>2 (Tummy Touch)</p>\n    <p>3 (Bum Touch)</p>\n    <p>4 (Direct Penis Touching)</p>\n    <p>5 (Anal Touching)</p>\n    <p>6 (Analingus)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={6} bind:range={stevenIntrusiveness} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Amie Naughtiness:</span>\n    <p>0 (Not Naughty)</p>\n    <p>1 (Intimate, Teenagers would get excited)</p>\n    <p>2 (Slightly Naughty eg handjob)</p>\n    <p>3 (Sexual Things eg sex)</p>\n    <p>4 (Naughty beyond 'normal' levels eg flashing)</p>\n    <p>5 (Performative things)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={5} bind:range={amieNaughtiness} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Steven Naughtiness:</span>\n    <p>0 (Not Naughty)</p>\n    <p>1 (Intimate, Teenagers would get excited)</p>\n    <p>2 (Slightly Naughty eg handjob)</p>\n    <p>3 (Sexual Things eg sex)</p>\n    <p>4 (Naughty beyond 'normal' levels eg flashing)</p>\n    <p>5 (Performative things)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={5} bind:range={stevenNaughtiness} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Ickyness:</span>\n    <p>0 (None)</p>\n    <p>1 (Logically can see it's a bit weird)</p>\n    <p>2 (Kinda icky)</p>\n    <p>3 (Weird)</p>\n    <p>4 (Dirty)</p>\n    <p>5 (Disgusting)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={5} bind:range={ickyness} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Physicality:</span>\n    <p>0 (Verbal)</p>\n    <p>1 (No noticeable effort)</p>\n    <p>2 (Slight movement)</p>\n    <p>3 (Full body movement)</p>\n    <p>4 (Makes you sweat)</p>\n    <p>5 (Like doing the bleep test)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={5} bind:range={physicality} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Preparation:</span>\n    <p>0 (None)</p>\n    <p>1 (Sometimes a couple of mins)</p>\n    <p>2 (Usually a couple of mins)</p>\n    <p>3 (An hour)</p>\n    <p>4 (A day)</p>\n    <p>5 (A month)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={5} bind:range={preparation} />\n  <br />\n  \n  <Tooltip>\n    <span slot=\"trigger\">Danger:</span>\n    <p>0 (None)</p>\n    <p>1 (Slight risk of small consequences eg handjob)</p>\n    <p>2 (Slight risk of med consequences / med risk of small consequences eg shave me)</p>\n    <p>3 (Med risk of med consequences / small risk of big consequences eg nudes)</p>\n    <p>4 (High risk of big consequneces eg public sex)</p>\n  </Tooltip>\n  <NumericButtonRange min={0} max={4} bind:range={danger} />\n</div>\n",
    "<script lang=\"ts\">;\n;\nimport { overallFilter, preIntensityFilter } from \"./filters\";\nimport Splash from \"./Splash.svelte\";\nimport External from \"./External.svelte\";\nimport Internal from \"./Internal.svelte\";\nimport Intensity from \"./Intensity.svelte\";\nimport Results from \"./Results.svelte\";\nimport { getIntensity } from \"../graph/IntensityCalculator\";\nimport { cubicOut } from \"svelte/easing\";\nimport { fade } from \"svelte/transition\";\nimport ViewFilters from \"./ViewFilters.svelte\";\nimport { postTasks } from \"../api\";\nexport let activities;\nlet stage = 0;\nlet direction = \"FORWARDS\";\nfunction next() {\n    direction = \"FORWARDS\";\n    if (stage >= 0 && stage <= 3) {\n        stage = (stage + 1);\n    }\n    settingsOpen = false;\n}\nfunction prev() {\n    direction = \"BACKWARDS\";\n    if (stage >= 1 && stage <= 4) {\n        stage = (stage - 1);\n    }\n    settingsOpen = false;\n}\nlet settingsOpen = false;\nfunction settings() {\n    settingsOpen = !settingsOpen;\n}\nlet intensityActivities;\n$: intensityActivities = activities\n    .map((activity) => ({\n    ...activity,\n    intensityValue: getIntensity(activity),\n}));\nlet preIntensityFilteredActivities;\n$: preIntensityFilteredActivities = intensityActivities.filter($preIntensityFilter);\nlet filteredActivities;\n$: filteredActivities = intensityActivities.filter($overallFilter);\nconst transitionDuration = 300;\nconst transitionEasing = cubicOut;\nfunction slideIn(node, _) {\n    if (direction === \"FORWARDS\") {\n        return {\n            duration: transitionDuration,\n            easing: transitionEasing,\n            css: (t, u) => `transform: translateX(${100 * u}vw);`\n        };\n    }\n    else {\n        return {\n            duration: transitionDuration,\n            easing: transitionEasing,\n            css: (t, u) => `transform: translateX(${-100 * u}vw);`\n        };\n    }\n}\nfunction slideOut(node, _) {\n    if (direction === \"FORWARDS\") {\n        return {\n            duration: transitionDuration,\n            easing: transitionEasing,\n            css: (t, u) => `transform: translateX(${-100 * u}vw);`\n        };\n    }\n    else {\n        return {\n            duration: transitionDuration,\n            easing: transitionEasing,\n            css: (t, u) => `transform: translateX(${100 * u}vw);`\n        };\n    }\n}\nlet lunchTime;\nlet dinnerTime;\n$: if (stage === 4) {\n    const safety = 1.5;\n    const sortedActivities = filteredActivities\n        .filter(act => act.tags.some(tag => tag.id === 29 /* one step */))\n        .filter(act => act.tags.every(tag => tag.id !== 28 /* no modifiers */))\n        .sort((a, b) => b.amieRating - a.amieRating);\n    const totalRating = sortedActivities.map(a => Math.pow(a.amieRating, safety)).reduce((a, b) => a + b, 0);\n    const lunchRandom = Math.random() * totalRating;\n    const dinnerRandom = Math.random() * totalRating;\n    let lunchActivity = null;\n    let dinnerActivity = null;\n    let currentWeight = 0;\n    sortedActivities.forEach((activity, idx) => {\n        currentWeight += Math.pow(activity.amieRating, safety);\n        if (lunchActivity == null && currentWeight >= lunchRandom) {\n            lunchActivity = activity;\n        }\n        if (dinnerActivity == null && lunchActivity !== activity && currentWeight >= dinnerRandom) {\n            dinnerActivity = activity;\n        }\n    });\n    const now = new Date();\n    const lunchDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), parseInt(lunchTime.slice(0, 2)), parseInt(lunchTime.slice(3, 5)));\n    const dinnerDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), parseInt(dinnerTime.slice(0, 2)), parseInt(dinnerTime.slice(3, 5)));\n    postTasks(new Date(lunchDate.getTime() + 30 * 60000), lunchActivity, new Date(dinnerDate.getTime() + 30 * 60000), dinnerActivity);\n}\n</script>\n\n<style>\n  .outer {\n    overscroll-behavior: contain;\n  }\n\n  .container {\n    display: flex;\n    position: fixed;\n    top: 10px;\n    bottom: 10px;\n    left: 10px;\n    right: 10px;\n  }\n\n  .stageContainer {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 50px;\n    overflow-y: visible;\n  }\n\n  .buttonBar {\n    display: grid;\n    justify-content: space-between;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n\n  .arrow {\n    width: 50px;\n    height: 50px;\n  }\n\n  .flipped {\n    transform: scaleX(-1);\n  }\n\n  .disabled {\n    opacity: 0;\n  }\n\n  .inactive {\n    filter: grayscale();\n  }\n</style>\n\n<div class=\"outer\">\n  <div class=\"container\">\n    {#if stage === 0}\n      <div class=\"stageContainer\" in:slideIn|local out:slideOut|local>\n        <Splash bind:lunchTime bind:dinnerTime/>\n      </div>\n    {/if}\n\n    {#if stage === 1}\n      <div class=\"stageContainer\" in:slideIn|local out:slideOut|local>\n        <External/>\n      </div>\n    {/if}\n\n    {#if stage === 2}\n      <div class=\"stageContainer\" in:slideIn|local out:slideOut|local>\n        <Internal/>\n      </div>\n    {/if}\n\n    {#if stage === 3}\n      <div class=\"stageContainer\" in:slideIn|local out:slideOut|local>\n        <Intensity activities={preIntensityFilteredActivities}/>\n      </div>\n    {/if}\n\n    {#if stage === 4}\n      <div class=\"stageContainer\" in:slideIn|local out:slideOut|local>\n        <Results activities={filteredActivities}/>\n      </div>\n    {/if}\n\n    <div class=\"buttonBar\">\n      <img class=\"arrow flipped\" style=\"grid-column: 1; grid-row: 1;\" class:disabled={stage === 0} src=\"/assets/next.svg\" alt=\"prev\" on:click={prev}/>\n      <!-- {filteredActivities.length} -->\n      {#if stage === 4}\n        <img class=\"arrow\" class:inactive={!settingsOpen} style=\"grid-column: 2; grid-row: 1;\" transition:fade src=\"/assets/cog.svg\" alt=\"cog\" on:click={settings}/>\n      {:else}\n        <img class=\"arrow\" style=\"grid-column: 2; grid-row: 1;\" transition:fade src=\"/assets/next.svg\" alt=\"next\" on:click={next}/>\n      {/if}\n    </div>\n\n    {#if settingsOpen}\n      <ViewFilters/>\n    {/if}\n  </div>\n</div>",
    "<script lang=\"ts\">import { asleep, busy, clean, clothed, ill } from \"./filters\";\n</script>\n\n<style>\n  button {\n    background-color: #A677A1;\n    color: #EEF4ED;\n    font-size: 18pt;\n    margin: 8px;\n    padding: 10px;\n    border-radius: 8px;\n    border: none;\n    box-shadow: 3px 3px 3px -2px #00233D;\n  }\n\n  button:active {\n    transform: translate(2px, 2px);\n    box-shadow: 1px 1px 1px -1px #00233D;\n    background-color: #6E2E76;\n  }\n\n  .active {\n    transform: translate(1px, 1px);\n    box-shadow: 2px 2px 1px -1px #00233D;\n    background-color: #6E2E76;\n  }\n\n  h1 {\n    width: 100%;\n    align-self: flex-start;\n    color: #007CBE;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .col {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n  }\n</style>\n\n<div class=\"col\">\n  <h1>Steven is:</h1>\n  <div class=\"row\">\n    <button class:active={$busy} on:click={busy.toggle}>Busy</button>\n    <button class:active={$ill} on:click={ill.toggle}>Not Great</button>\n    <button class:active={$asleep} on:click={asleep.toggle}>Asleep</button>\n  </div>\n\n\n  <h1>We:</h1>\n  <button class:active={$clean} on:click={clean.toggle}>Showered recently</button>\n  <button class:active={$clothed} on:click={clothed.toggle}>Should keep our clothes on</button>\n</div>\n\n",
    "<script lang=\"ts\">;\nimport { quadOut } from \"svelte/easing\";\nimport { maxIntensity } from \"./filters\";\nexport let activities;\nlet relevantActivities;\n$: relevantActivities = activities.filter(activity => activity.amieRating > 20 &&\n    activity.tags.every(tag => tag.id !== 28) &&\n    activity.intensity.physicality.max !== 0).sort((a, b) => a.intensityValue - b.intensityValue);\nconst numberOfPoints = 11;\nconst maxIdx = numberOfPoints - 1;\nlet scalePoints;\n$: scalePoints = Array(numberOfPoints).fill(null).map((_, idx) => idx * (relevantActivities.length - 1) / maxIdx).map(idx => Math.round(idx));\nlet scaleActivities;\n$: scaleActivities = scalePoints.map(idx => relevantActivities[idx]);\nlet dedupeScaleActivities;\n$: dedupeScaleActivities = [...new Set(scaleActivities)];\nlet barHeight = 1;\nlet topMin = -2;\nlet topMax;\n$: topMax = barHeight - 18;\nlet topRange;\n$: topRange = topMax - topMin;\nlet top = topMin;\nlet dragInitClientY = null;\nlet dragInitTop = 0;\nfunction touchStart(event) {\n    dragInitClientY = event.touches[0].clientY;\n    dragInitTop = top;\n}\nfunction touchEnd(event) {\n    dragInitClientY = null;\n}\nfunction touchMove(event) {\n    if (dragInitClientY) {\n        const dragNewClientY = event.touches[0].clientY;\n        top = Math.min(Math.max(dragInitTop + dragNewClientY - dragInitClientY, topMin), topMax);\n    }\n}\nfunction dragStart(event) {\n    dragInitClientY = event.clientY;\n    dragInitTop = top;\n}\nfunction dragEnd(event) {\n    dragInitClientY = null;\n}\nfunction drag(event) {\n    if (dragInitClientY) {\n        const dragNewClientY = event.clientY;\n        top = Math.min(Math.max(dragInitTop + dragNewClientY - dragInitClientY, topMin), topMax);\n    }\n}\nfunction click(event) {\n    top = event.offsetY;\n}\nlet selectedIdx;\n$: selectedIdx = Math.round(Math.min(Math.max(maxIdx * (top - topMin) / topRange, 0), maxIdx));\nlet selectedActivity;\n$: selectedActivity = scaleActivities[selectedIdx];\n$: maxIntensity.set(selectedActivity.intensityValue);\nfunction scale(node, _) {\n    return {\n        duration: 200,\n        easing: quadOut,\n        css: (t) => `transform: scale(${t}); transform-origin: right;`\n    };\n}\n</script>\n\n<style>\n  .slider {\n    position: absolute;\n    top: 20px;\n    bottom: 50px;\n    left: 0;\n    right: 15px;\n    overflow: visible;\n    overscroll-behavior: contain;\n  }\n\n  .bar {\n    position: absolute;\n    top: 5px;\n    bottom: 5px;\n    width: 5px;\n    right: 7.5px;\n    background-color: #A677A1;\n    border-radius: 2px;\n  }\n\n  .thumbContainer {\n    position: absolute;\n    left: 0;\n    right: 0;\n    display: grid;\n    grid-template-columns: 1fr 50px 20px;\n  }\n\n  .thumb {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: #6E2E76;\n    justify-self: right;\n    transform: translateY(7px);\n    touch-action: none;\n    pointer-events: none;\n  }\n\n  .line {\n    height: 4px;\n    width: 100%;\n    justify-self: center;\n    transform: translateY(15px) scaleX(1.1);\n    background-color: #6E2E76;\n    touch-action: none;\n    pointer-events: none;\n  }\n\n  .act {\n    text-align: right;\n    background-color: #6E2E76;\n    color: #EEF4ED;\n    padding: 5px 10px 5px 10px;\n    border-radius: 10px;\n    justify-self: right;\n    align-self: start;\n    touch-action: none;\n    pointer-events: none;\n    grid-column: 1;\n    grid-row: 1;\n    font-size: large;\n  }\n\n  .unselectable {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n</style>\n\n<div class=\"slider\" \n  bind:offsetHeight={barHeight}\n  on:touchstart|stopPropagation|preventDefault={touchStart}\n  on:touchmove|stopPropagation|preventDefault={touchMove}\n  on:touchend|stopPropagation|preventDefault={touchEnd}\n  on:mouseleave|stopPropagation|preventDefault={dragEnd}\n  on:mousedown|stopPropagation|preventDefault={dragStart}\n  on:mousemove|stopPropagation|preventDefault={drag}\n  on:mouseup|stopPropagation|preventDefault={dragEnd}\n>\n  <div class=\"bar\" on:click|stopPropagation={click}/>\n  <div class=\"thumbContainer\" style={`top: ${top}px`}>\n    <div class=\"line\"/>\n    {#each dedupeScaleActivities as activity}\n      {#if selectedActivity.id === activity.id}\n        <div class=\"act unselectable\" transition:scale|local>{activity.name}</div>\n      {/if}\n    {/each}\n    <div class=\"thumb\"/>\n  </div>\n</div>",
    "<script lang=\"ts\">import { body, touch, wrists } from \"./filters\";\n</script>\n\n<style>\n  button {\n    background-color: #A677A1;\n    color: #EEF4ED;\n    font-size: 18pt;\n    margin: 8px;\n    padding: 10px;\n    border-radius: 8px;\n    border: none;\n    box-shadow: 5px 5px 5px -1px #00233D;\n  }\n\n  button:active {\n    transform: translate(2px, 2px);\n    box-shadow: 1px 1px 2px -1px #00233D;\n    background-color: #6E2E76;\n  }\n\n  .active {\n    transform: translate(1px, 1px);\n    box-shadow: 3px 3px 3px -1px #00233D;\n    background-color: #6E2E76;\n  }\n\n  h1 {\n    width: 100%;\n    align-self: flex-start;\n    color: #007CBE;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .col {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n  }\n</style>\n\n<div class=\"col\">\n  <!-- <button class:active={empowered} on:click={()=>empowered=!empowered}>I feel sexual!</button> -->\n  <button class:active={$wrists} on:click={wrists.toggle}>My wrists work!</button>\n  <button class:active={$body} on:click={body.toggle}>I'm capable of movement!</button>\n\n  <h1>Touch me a:</h1>\n  <div class=\"row\">\n    <button class:active={$touch === \"nottle\"} on:click={() => touch.set(\"nottle\")}>Nottle</button>\n    <button class:active={$touch === \"little\"} on:click={() => touch.set(\"little\")}>Little</button>\n    <button class:active={$touch === \"lottle\"} on:click={() => touch.set(\"lottle\")}>Lottle</button>\n  </div>\n</div>\n",
    "<script lang=\"ts\">;\nimport { slide, scale } from \"svelte/transition\";\nexport let activities;\nlet sortedActivities;\n$: sortedActivities = activities.sort((a, b) => b.amieRating - a.amieRating);\nlet amieRatings;\n$: amieRatings = activities.map(activity => activity.amieRating);\nlet amieMinRating;\n$: amieMinRating = Math.min(...amieRatings);\nlet amieMaxRating;\n$: amieMaxRating = Math.max(...amieRatings);\nlet amieRatingRange;\n$: amieRatingRange = amieMaxRating - amieMinRating;\nfunction amieRatingPercent(amieRating) {\n    if (amieRatingRange === 0)\n        return \"100%\";\n    const aboveMin = amieRating - amieMinRating;\n    const fraction = aboveMin / amieRatingRange;\n    const percent = fraction * 100;\n    return `${percent.toFixed(0)}%`;\n}\nlet stevenRatings;\n$: stevenRatings = activities.map(activity => activity.stevenRating);\nlet stevenMinRating;\n$: stevenMinRating = Math.min(...stevenRatings);\nlet stevenMaxRating;\n$: stevenMaxRating = Math.max(...stevenRatings);\nlet stevenRatingRange;\n$: stevenRatingRange = stevenMaxRating - stevenMinRating;\nfunction stevenRatingPercent(stevenRating) {\n    if (intensityRange === 0)\n        return \"100%\";\n    const aboveMin = stevenRating - stevenMinRating;\n    const fraction = aboveMin / stevenRatingRange;\n    const percent = fraction * 100;\n    return `${percent.toFixed(0)}%`;\n}\nlet intensities;\n$: intensities = activities.map(activity => activity.intensityValue);\nlet minIntensity;\n$: minIntensity = Math.min(...intensities);\nlet maxIntensity;\n$: maxIntensity = Math.max(...intensities);\nlet intensityRange;\n$: intensityRange = maxIntensity - minIntensity;\nfunction intensityPercent(intensity) {\n    if (intensityRange === 0)\n        return \"100%\";\n    const aboveMin = intensity - minIntensity;\n    const fraction = aboveMin / intensityRange;\n    const percent = fraction * 100;\n    return `${percent.toFixed(0)}%`;\n}\nlet selected = null;\nfunction clicked(activity) {\n    showTags = false;\n    showIntensityComponents = false;\n    if (selected !== null && selected.id === activity.id) {\n        selected = null;\n    }\n    else {\n        selected = activity;\n    }\n}\nfunction human(machine) {\n    machine = machine.slice(0, 1).toUpperCase() + machine.slice(1);\n    machine = machine.replace(/([A-Z])/g, ' $1');\n    machine = machine.trim();\n    return machine;\n}\nlet showIntensityComponents = false;\nlet showTags = false;\nfunction toggleIntensityComponents() {\n    showIntensityComponents = !showIntensityComponents;\n}\nfunction toggleTags() {\n    showTags = !showTags;\n}\n</script>\n\n<style>\n  button {\n    background-color: #a677a1;\n    color: #eef4ed;\n    font-size: 14pt;\n    margin: 8px;\n    padding: 10px;\n    border-radius: 8px;\n    border: none;\n    box-shadow: 5px 5px 5px -1px #00233d;\n  }\n\n  button:active {\n    transform: translate(2px, 2px);\n    box-shadow: 1px 1px 2px -1px #00233d;\n    background-color: #6e2e76;\n  }\n\n  .active {\n    transform: translate(1px, 1px);\n    box-shadow: 3px 3px 3px -1px #00233d;\n    background-color: #6e2e76;\n  }\n\n  h1 {\n    width: 100%;\n    padding: 5px 10px;\n    margin: 50px 0 5px 0;\n    align-self: flex-start;\n    background-color: #007cbe;\n    border-radius: 20px;\n    color: #eef4ed;\n    box-sizing: border-box;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .container {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    overflow-y: auto;\n  }\n\n  .blurBottom {\n    position : absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    overflow: hidden;\n  }\n\n  .blurBottom:after {\n    content  : \"\";\n    position : absolute;\n    z-index  : 1;\n    bottom   : 0;\n    left     : 0;\n    pointer-events: none;\n    background-image : linear-gradient(to bottom, transparent, white 90%);\n    width    : 100%;\n    height   : 20px;\n  }\n\n  .col {\n    width: calc(100% - 20px);\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .infoBox {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    border: 1px solid #00233d;\n    border-radius: 10px;\n    background-color: white;\n    color: #00233d;\n  }\n\n  .row {\n    display: flex; \n    flex-direction: row; \n    justify-content: space-around;\n    flex-wrap: wrap;\n    margin: 4px;\n  }\n\n  .infoValue {\n    margin: 8px 4px;\n  }\n\n  .tag {\n    border: 1px solid black;\n    margin: 4px;\n    padding: 4px;\n    border-radius: 6px;\n  }\n\n  .spacer {\n    height: 100px;\n    width: 100%;\n    flex-shrink: 0;\n  }\n</style>\n\n<div class=\"blurBottom\">\n  <div class=\"container\">\n    {#each sortedActivities as activity (activity.id)}\n      <div class=\"col\">\n        <button\n          class:active={selected !== null && selected.id === activity.id}\n          on:click={() => clicked(activity)}>\n          {activity.name}\n        </button>\n        {#if selected !== null && selected.id === activity.id}\n          <div class=\"infoBox\" transition:slide|local={{ duration: 500 }}>\n            {#if activity.description.trim().length > 0}\n              <p style=\"margin: 20px; text-align: center\">{activity.description}</p>\n            {/if}\n  \n            <div class=\"row\">\n              <span class=\"infoValue\">\n                <b>Amie:</b>\n                {amieRatingPercent(activity.amieRating)}\n              </span>\n\n              <span class=\"infoValue\">\n                <b>Steven:</b>\n                {stevenRatingPercent(activity.stevenRating)}\n              </span>\n              \n              <span class=\"infoValue\">\n                <b>Intensity:</b>\n                {intensityPercent(activity.intensityValue)}\n              </span>\n            </div>\n\n            <div class=\"row\">\n              <button\n                class:active={showIntensityComponents}\n                on:click={toggleIntensityComponents}>\n                Intensity Components\n              </button>\n\n              <button\n                class:active={showTags}\n                on:click={toggleTags}>\n                Tags\n              </button>\n            </div>\n\n            {#if showIntensityComponents}\n              <div class=\"row\" transition:slide|local={{ duration: 500 }}>\n                {#each Object.entries(activity.intensity) as [component, componentValue]}\n                <span class=\"infoValue\">\n                  <b>{human(component)}:</b>\n                  {componentValue.min} - {componentValue.max}\n                </span>\n                {/each}\n              </div>\n            {/if}\n\n            {#if showTags}\n              <div class=\"row\" transition:slide|local={{ duration: 500 }}>\n                {#each activity.tags as tag}\n                    <div class=\"tag\">\n                      {tag.name}\n                    </div>\n                {/each}\n              </div>\n            {/if}\n          </div>\n        {/if}\n      </div>\n    {/each}\n    <div class=\"spacer\"/>\n  </div>  \n</div>\n",
    "<script lang=\"ts\">import { scale } from \"svelte/transition\";\nexport let lunchTime = \"12:15\";\nexport let dinnerTime = \"17:00\";\n</script>\n\n<style>\n  .logo {\n    max-height: 50%;\n    width: 100%;\n  }\n\n  .col {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .topLeft {\n    position: fixed;\n    top: 0;\n    left: 0;\n    text-align: center;\n  }\n\n  .topRight {\n    position: fixed;\n    top: 0;\n    right: 0;\n    text-align: center;\n  }\n\n  h1 {\n    width: 100%;\n    align-self: flex-start;\n    color: #007CBE;\n  }\n\n  .centerText {\n    text-align: center;\n  }\n</style>\n\n<div class=\"topLeft\">\n  <p>Lunch</p>\n  <input type=\"time\" bind:value={lunchTime}/>\n</div>\n\n<div class=\"topRight\">\n  <p>Dinner</p>\n  <input type=\"time\" bind:value={dinnerTime}/>\n</div>\n\n<div class=\"col\" in:scale>\n  <img class=\"logo\" src=\"/assets/logo.svg\" alt=\"Power Plant\"/>\n  <h1 class=\"centerText\">Power Plant</h1>\n</div>\n",
    "<script lang=\"ts\">import { cuteSexual, modifier } from \"./filters\";\nimport { fly } from \"svelte/transition\";\n</script>\n\n<style>\n  button {\n    background-color: #A677A1;\n    color: #EEF4ED;\n    font-size: 14pt;\n    margin: 8px;\n    padding: 10px;\n    border-radius: 8px;\n    border: none;\n    box-shadow: 5px 5px 5px -1px #00233D;\n  }\n\n  button:active {\n    transform: translate(2px, 2px);\n    box-shadow: 1px 1px 2px -1px #00233D;\n    background-color: #6E2E76;\n  }\n\n  .active {\n    transform: translate(1px, 1px);\n    box-shadow: 3px 3px 3px -1px #00233D;\n    background-color: #6E2E76;\n  }\n\n  h1 {\n    width: 100%;\n    align-self: flex-start;\n    color: #007CBE;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .col {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n  }\n\n  .container {\n    position: fixed;\n    right: 10px;\n    max-width: calc(100vw - 20px);\n    bottom: 75px;\n    border: 1px solid #00233d;\n    border-radius: 10px;\n    background-color: #EEF4ED;\n  }\n</style>\n\n<div class=\"container\" transition:fly={{x: 300}}>\n  <div class=\"row\">\n    <button class:active={$cuteSexual === \"cute\"} on:click={() => cuteSexual.set(\"cute\")}>Only Cute</button>\n    <button class:active={$cuteSexual === \"any\"} on:click={() => cuteSexual.set(\"any\")}>Any</button>\n    <button class:active={$cuteSexual === \"sexual\"} on:click={() => cuteSexual.set(\"sexual\")}>Only Sexual</button>\n  </div>\n\n  <div class=\"row\">\n    <button class:active={$modifier === \"banned\"} on:click={() => modifier.set(\"banned\")}>No Modifiers</button>\n    <button class:active={$modifier === \"any\"} on:click={() => modifier.set(\"any\")}>Any</button>\n    <button class:active={$modifier === \"required\"} on:click={() => modifier.set(\"required\")}>Only Modifiers</button>\n  </div>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}